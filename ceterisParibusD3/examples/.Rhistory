path <- 'C:\Users\Ewa\Desktop\INTERACTIVE XAI FOR DALEX\3. (October) - adding more layers\pakiet JS dla ceterisParibus\ceterisParibusExt\ceterisParibusD3\examples\\'
library("DALEX")
library("randomForest")
library("ceterisParibus")
library(dplyr)
library(jsonlite)
set.seed(59)
path <- 'C:\\Users\\Ewa\\Desktop\\INTERACTIVE XAI FOR DALEX\\3. (October) - adding more layers\\pakiet JS dla ceterisParibus\\ceterisParibusExt\\ceterisParibusD3\\examples\\'
# set default theme
theme_set(theme_bw() + theme(text = element_text(size = 18)))
# prepare model
apartments_rf_model <- randomForest(m2.price ~ construction.year + surface + floor +
no.rooms + district,
data = apartments)
explainer_rf <- explain(apartments_rf_model,
data = apartmentsTest[,2:6],
y = apartmentsTest$m2.price)
apartments_A <- apartmentsTest[958,]
cp_rf_A <- ceteris_paribus(explainer_rf, apartments_A, y = apartments_A$m2.price)
plot(cp_rf_A, show_profiles = TRUE, show_observations = TRUE,
selected_variables = c("surface","construction.year"))
### B) prepare data as JSONs
dfl <- c(list(cp_rf_A))     #c(list(cp_rf), list(cp_lm))
all_profiles <- do.call(rbind, dfl)
class(all_profiles) <- "data.frame"
all_observations <- lapply(dfl, function(tmp) {
attr(tmp, "observations")$`_ids_` <- rownames(attr(tmp, "observations"))
attr(tmp, "observations")
})
all_observations <- do.call(rbind, all_observations)
# saving ceteris_paribus output dataframe as JS object to js file
write(x = paste('exemplaryData2 = ', as.character(toJSON(all_profiles, pretty = TRUE, factor = 'string', null ='null', na = 'null'))),
file = paste0(path, 'example1.js'))
write(x = paste('exemplaryData_obs2 = ', as.character(toJSON( all_observations, pretty = TRUE, factor = 'string', null ='null', na = 'null'))),
file = paste0(path, 'example_obs1.js'))
numer <- 1
# saving ceteris_paribus output dataframe as JS object to js file
write(x = paste('example' , numer, ' = ', as.character(toJSON(all_profiles, pretty = TRUE, factor = 'string', null ='null', na = 'null'))),
file = paste0(path, 'example', numer, '.js'))
write(x = paste('example_obs', numer, ' = ', as.character(toJSON( all_observations, pretty = TRUE, factor = 'string', null ='null', na = 'null'))),
file = paste0(path, 'example_obs', numer, '.js'))
# saving ceteris_paribus output dataframe as JS object to js file
write(x = paste0('example' , numer, ' = ', as.character(toJSON(all_profiles, pretty = TRUE, factor = 'string', null ='null', na = 'null'))),
file = paste0(path, 'example', numer, '.js'))
write(x = paste0('example_obs', numer, ' = ', as.character(toJSON( all_observations, pretty = TRUE, factor = 'string', null ='null', na = 'null'))),
file = paste0(path, 'example_obs', numer, '.js'
# saving ceteris_paribus output dataframe as JS object to js file
write(x = paste0('example' , numer, ' = ', as.character(toJSON(all_profiles, pretty = TRUE, factor = 'string', null ='null', na = 'null'))),
file = paste0(path, 'example', numer, '.js'))
write(x = paste0('example_obs', numer, ' = ', as.character(toJSON( all_observations, pretty = TRUE, factor = 'string', null ='null', na = 'null'))),
file = paste0(path, 'example_obs', numer, '.js'))
apartments_B <- select_neighbours(apartmentsTest, apartmentsTest[958,], n = 15)
cp_rf_B <- ceteris_paribus(explainer_rf, apartments_B, y = apartments_B$m2.price)
plot(cp_rf_B,
show_profiles = TRUE, show_observations = TRUE, show_rugs = TRUE,
selected_variables = c("surface","construction.year"))
### B) prepare data as JSONs
dfl <- c(list(cp_rf_B))     #c(list(cp_rf), list(cp_lm))
all_profiles <- do.call(rbind, dfl)
class(all_profiles) <- "data.frame"
all_observations <- lapply(dfl, function(tmp) {
attr(tmp, "observations")$`_ids_` <- rownames(attr(tmp, "observations"))
attr(tmp, "observations")
})
all_observations <- do.call(rbind, all_observations)
# saving ceteris_paribus output dataframe as JS object to js file
write(x = paste0('example' , numer, ' = ', as.character(toJSON(all_profiles, pretty = TRUE, factor = 'string', null ='null', na = 'null'))),
file = paste0(path, 'example', numer, '.js'))
write(x = paste0('example_obs', numer, ' = ', as.character(toJSON( all_observations, pretty = TRUE, factor = 'string', null ='null', na = 'null'))),
file = paste0(path, 'example_obs', numer, '.js'))
createJSONsWithData <- function(numer, dfl){
all_profiles <- do.call(rbind, dfl)
class(all_profiles) <- "data.frame"
all_observations <- lapply(dfl, function(tmp) {
attr(tmp, "observations")$`_ids_` <- rownames(attr(tmp, "observations"))
attr(tmp, "observations")
})
all_observations <- do.call(rbind, all_observations)
# saving ceteris_paribus output dataframe as JS object to js file
write(x = paste0('example' , numer, ' = ', as.character(toJSON(all_profiles, pretty = TRUE, factor = 'string', null ='null', na = 'null'))),
file = paste0(path, 'example', numer, '.js'))
write(x = paste0('example_obs', numer, ' = ', as.character(toJSON( all_observations, pretty = TRUE, factor = 'string', null ='null', na = 'null'))),
file = paste0(path, 'example_obs', numer, '.js'))
}
numer <- 1
apartments_rf_model <- randomForest(m2.price ~ construction.year + surface + floor +
no.rooms + district,
data = apartments)
explainer_rf <- explain(apartments_rf_model,
data = apartmentsTest[,2:6],
y = apartmentsTest$m2.price)
apartments_A <- apartmentsTest[958,]
cp_rf_A <- ceteris_paribus(explainer_rf, apartments_A, y = apartments_A$m2.price)
plot(cp_rf_A, show_profiles = TRUE, show_observations = TRUE,
selected_variables = c("surface","construction.year"))
dfl <- c(list(cp_rf_A))     #c(list(cp_rf), list(cp_lm))
createJSONsWithData(numer = numer, dfl = dfl)
numer <- 2
apartments_B <- select_neighbours(apartmentsTest, apartmentsTest[958,], n = 15)
cp_rf_B <- ceteris_paribus(explainer_rf, apartments_B, y = apartments_B$m2.price)
plot(cp_rf_B,
show_profiles = TRUE, show_observations = TRUE, show_rugs = TRUE,
selected_variables = c("surface","construction.year"))
### B) prepare data as JSONs
dfl <- c(list(cp_rf_B))
createJSONsWithData(numer = numer, dfl = dfl)
apartments_C <- select_sample(apartmentsTest, n = 15)
cp_rf_C <- ceteris_paribus(explainer_rf, apartments_C, y = apartments_C$m2.price)
plot(cp_rf_C,
show_profiles = FALSE,
selected_variables = c("surface","construction.year"))
### B) prepare data as JSONs
dfl <- c(list(cp_rf_C))
createJSONsWithData(numer = numer, dfl = dfl)
